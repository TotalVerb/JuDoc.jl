var documenterSearchIndex = {"docs":
[{"location":"#JuDoc.jl-Documentation-1","page":"Home","title":"JuDoc.jl - Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuDoc is a simple static site generator (SSG) oriented towards technical blogging (code, maths, ...) and light, fast-loading pages. The base syntax is plain markdown with a few extensions such as the ability to define and use LaTeX-like commands in or outside of maths environments (see Syntax).","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For a short list of features see here.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"note: Note\nThis package is still young and issues should be expected, comments, questions, bug reports etc. are welcome to make it better, see also the Contributing section.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"With Julia ≥ 1.0,","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add JuDoc","category":"page"},{"location":"#External-dependencies-1","page":"Home","title":"External dependencies","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuDoc allows a post-processing step which pre-renders highlighted code blocks and math environments and minifies generated HTML and CSS. This step requires a few external dependencies; they are not required to run JuDoc:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"node.js for the pre-rendering step,\npython3 for the minification step,\ngit for automating pushing and pulling to a remote repository.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Assuming you have those, you will then need to install highlight.js via npm:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[sudo] npm install -g highlight.js","category":"page"},{"location":"#","page":"Home","title":"Home","text":"and the python package css_html_js_minify which you can install with pip3:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pip3 install css_html_js_minify","category":"page"},{"location":"#Quick-start-1","page":"Home","title":"Quick-start","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Change directory to an appropriate sandbox location on your computer, start Julia and:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using JuDoc\njulia> newsite(\"test\", template=\"pure-sm\")\n✓ Website folder generated at \"test\" (now the current directory).\n→ Use serve() from JuDoc to see the website in your browser.\n\njulia> serve()\n→ Initial full pass...\n→ Starting the server...\n✓ LiveServer listening on http://localhost:8000/ ...\n  (use CTRL+C to shut down)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This will generate a folder test with overall structure:","category":"page"},{"location":"#","page":"Home","title":"Home","text":".\n├── assets/\n├── css/\n├── index.html\n├── libs/\n├── pub/\n└── src\n    ├── _css/\n    ├── _html_parts/\n    ├── config.md\n    ├── index.md\n    └── pages/","category":"page"},{"location":"#","page":"Home","title":"Home","text":"You can see what the corresponding website looks like by opening a browser at the given address http://localhost:8000.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The key folder in which you should work is src/. For instance, a good way to become familiar with JuDoc's extended markdown syntax is to head to src/index.md and modify its content while keeping an eye in a browser on http://localhost:8000/index.html.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Once you've had a feel for the basic syntax, head over to the Workflow section of the manual for more information on the folder structure etc.","category":"page"},{"location":"#About-1","page":"Home","title":"About","text":"","category":"section"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This is a partial list of JuDoc's features that you may find interesting/useful; head to the manual part of the docs for more details.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"LaTeX-like definition of commands (via \\newcommand{..}[.]{..})\ninclusion of user-defined div-blocks via @@divname ... @@ and raw-html via ~~~ ... ~~~\nmaths rendered via KaTeX, code via highlight.js both can be pre-rendered (see further below)\nhyper-references for equations and citations\nsimple html templating\nfast rendering (~5ms per page on warm session)\nlive preview (via LiveServer.jl)\noptimisation step to speed up wepage rendering:\npre-rendered KaTeX (requires node)\npre-rendered code highlighting (requires node and highlight.js)\nminified output (via css-html-js-minify, requires python3)\nall-in-one \"publish\" step to compile, optimise and push your website","category":"page"},{"location":"#Why?-1","page":"Home","title":"Why?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"There is a multitude of static site generators out there so why bother with yet another one, and is this one worth your time?","category":"page"},{"location":"#","page":"Home","title":"Home","text":"I didn't start working on JuDoc hoping to \"beat\" mature and sophisticated generators like Hugo etc. Rather, a few years back I was using Jacob Mattingley's Jemdoc package in Python with Wonseok Shin's neat extension for MathJax support and decided I wanted to build something similar in Julia (whence the name) and improve on the few things I didn't like.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"aside: Aside\nInterestingly, there still seems to be a number of people who use Jemdoc in academia. For instance Ben Recht, Madeleine Udell or Marco Cuturi. So working on JuDoc seemed a worthwhile.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Among the things I wanted to improve over Jemdoc were:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"support live-preview with near-instant rendering of modifications,\ngenerate fast-loading webpages,\nsupport KaTeX,\nallow LaTeX-like commands including outside of maths environment,\nbetter control over the layout with a simple templating system.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"When compared with more serious static site generators like Hugo or Jekyll, clearly JuDoc is not in the same league. One element that may be particularly useful though are the markdown extensions which allow to construct sophisticated commands and thereby effectively define \"your own markdown flavour\".","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you just want formatted text and pictures, JuDoc will probably not be very useful to you. However, if you want to write technical documents with tables, maths, recurring elements etc, then JuDoc may be helpful.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you think JuDoc could help you but you're not sure or you seem to be blocked by a missing feature, please open an issue.","category":"page"},{"location":"#Licenses-1","page":"Home","title":"Licenses","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Core: JuDoc, JuDocTemplates and LiveServer are all MIT licensed.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"External: these libraries are used \"as-is\":","category":"page"},{"location":"#","page":"Home","title":"Home","text":"KaTeX is MIT licensed,\nNode's is essentially MIT licensed,\ncss-html-js-minify is LGPL licensed,\nhighlight.js is BSD licensed,\ngit is GPL licensed.","category":"page"},{"location":"man/workflow/#Workflow-1","page":"Workflow","title":"Workflow","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In this workflow it is assumed that you will eventually host your website on GitHub or GitLab but it shouldn't be hard to adapt to your particular case.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Contents:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Local editing\nStructure\nLibraries\nHighlight\nHosting the website\nOptimisation step\n(git) synchronisation\nMerge conflicts","category":"page"},{"location":"man/workflow/#Local-editing-1","page":"Workflow","title":"Local editing","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"To get started, the easiest is to use the newsite function to generate a website folder which you can then modify to your heart's content. The command takes one mandatory argument: the name of the folder, and you can specify a template with template=...:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"julia> newsite(\"Test\"; template=\"pure-sm\")\n✓ Website folder generated at Test (now the current directory).\n→ Use `serve()` from `JuDoc` to see the website in your browser.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"where the supported templates are currently:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Name Adapted from Comment\n\"basic\" N/A (example) minimal cruft, no extra JS\n\"hypertext\" Grav \"Hypertext\" (example) minimal cruft, no extra JS\n\"pure-sm\" Pure \"Side-Menu\" (example) small JS for the side menu\n\"vela\" Grav \"Vela\" (example) JQuery + some JS for the side menu\n\"tufte\" Tufte CSS (example) extra font + stylesheet, no extra JS","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Once you have done that, you can serve your website once in the folder doing","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"julia> serve()\n✓ LiveServer listening on http://localhost:8000/ ...\n  (use CTRL+C to shut down)","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"and navigate in a browser to the corresponding address to see the website being rendered.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"note: Note\nIf you're using the Atom editor, you may like to use the Atom browser extension which allows you to have a browser in an Atom pane.","category":"page"},{"location":"man/workflow/#Structure-1","page":"Workflow","title":"Structure","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The newsite command above generates folders and examples files following the appropriate structure, so the easiest is to start with that and modify in place.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── assets/\n├── libs/\n└── src/","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Once you run serve the first time, two additional folders are generated (css/ and pub/) along with the landing page index.html.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Among these folders,","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"the main folder is src/ and its subfolders, this is effectively where the source for your site is,\nyou should ignore css/ and pub/ these are generated and any changes you'd do there will be silently over-written whenever you modify files in src/; the same comment holds for index.html,\nthe folders assets/ and libs/ contain auxiliary items that are useful for your site: assets/ would contain code snippets, images etc. while libs/ would contain javascript libraries that you may need (KaTeX and highlight are in there by default).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In the src/ folder, the structure is:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── _css\n│   ├── judoc.css\n│   └── ...\n├── _html_parts\n│   ├── foot.html\n│   ├── head.html\n│   └── ...\n├── config.md\n├── index.md\n└── pages\n    ├── page1.md\n    └── ...","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Pages","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The index.md will generate the site's landing page. The pages/page1.md would correspond to pages on your website (you can have whatever subfolder structure you want in there, and will just have to adapt internal links appropriately). See also the Syntax.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"note: Note\nAt any point you can write pages in HTML from scratch if you want to go beyond what JuDoc can offer; these pages will just be copied as they are. So for instance you may prefer to write an index.html file instead of using the index.md to generate it. You would still put it at the exact same place though (src/index.html) and let JuDoc copy the files at the appropriate place.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"HTML parts","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The files in _html_parts/ are the building blocks that will go around the (processed) content contained in the *.md pages. So the head.html will be inserted before, the foot.html after etc. Adjusting these will help you make sure the site has the exact layout you want. The layout can also depend on the page you're on if it uses {{ispage path/to/page}} ... {{end}}  (see Templating).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"CSS","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Unsurprisingly, the style sheets in _css/ will help you tune the way your site looks. The judoc.css is the stylesheet that corresponds more specifically to the styling of the .jd-content div and all that goes in it, it is usually the first style-sheet that should be loaded. The simplest way to adjust the style easily would be to define your own stylesheet _css/adjustments.css and it be the last stylesheet loaded in _html_parts/head.html so that you can easily overwrite whatever properties you don't like and define your own. You could also have specific stylesheet that would only be loaded on specific pages using {{ispages ...}} (see Templating).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"note: Note\nIt wouldn't be hard for JuDoc to use page variables in the CSS stylesheet too. You could then do things like@def col1 = aliceblueand.mydiv { color: $col1 }I'm not 100% sure how useful that could be though so if you would like to see this happen, please open an issue!","category":"page"},{"location":"man/workflow/#Libraries-1","page":"Workflow","title":"Libraries","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"If you used the newsite function to get started, then you should have a libs/ folder with","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── highlight/\n└── katex/","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"If you require other libraries to run your website, this is where you should put them while not forgetting to load them in your _html_parts; for instance in foot_highlight.html you will find:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"<script src=\"/libs/highlight/highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();hljs.configure({tabReplace: '    '});</script>","category":"page"},{"location":"man/workflow/#Highlight-1","page":"Workflow","title":"Highlight","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"If you used the newsite command then the libs/highlight/ folder contains","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":".\n├── github.min.css\n└── highlight.pack.js","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Of course if you want to change either how things look or which languages are supported, you should head to highlightjs.org, select the languages you want in the Custom package section, download the bundle and copy over the relevant files to libs/highlight/. By default, bash, html/xml, python, julia, julia-repl, css, r, markdown, ini/TOML, ruby and yaml are supported.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Just remember to refer to the appropriate style-sheet in your HTML building blocks for instance src/_html_parts/head_highlight.html:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"<link rel=\"stylesheet\" href=\"/libs/highlight/github.min.css\">","category":"page"},{"location":"man/workflow/#Hosting-the-website-1","page":"Workflow","title":"Hosting the website","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In this section, the assumption is that you will host your website on GitHub. The procedure should be very similar with GitLab. If you're using your own hosting, you would pretty much just need to copy/clone the content of your folder.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"On GitHub/GitLab, the first step is to create a repository that would be acceptable for a personal webpage.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Follow the guide to do so on GitHub.\nOr the guide to do so on GitLab.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Once the repository is created, clone it on your computer, remove whatever is in it if it wasn't empty and copy over the content of the website folder (so if you had done newsite(\"Test/\") then you'd copy over the content of the folder Test into the newly cloned folder username.github.io/).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Now just do the usual git add, commit and push and your site will be live in a matter of minutes.","category":"page"},{"location":"man/workflow/#Optimisation-step-1","page":"Workflow","title":"Optimisation step","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The optimize function should typically be run before you push your website online. That step can:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"pre-render KaTeX and highlight code to HTML so that the pages don't have to load these javascript libraries,\nminify all generated HTML and CSS.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Those steps (which you can opt out of using the appropriate keyword prerender=false or minify=false) may lead to faster loading pages.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"In order to run this optimisation step, you will need some Dependencies but if you don't have them, JuDoc will tell you and ignore the corresponding step. Note also that doing a full pass of pre-rendering and minifying may take a few seconds depending on how many pages you have.","category":"page"},{"location":"man/workflow/#(git)-synchronisation-1","page":"Workflow","title":"(git) synchronisation","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The publish function helps you wrap the optimize step as well as a git add, commit and push all in one (provided the optimize step didn't fail).","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"So, in short, your full workflow may look like","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"using JuDoc\n# cd to the appropriate directory\ncd(\"path/user.github.io\")\n# start serving\nserve()\n# ...\n# edit things, add pages, tune layout etc.\n# while keeping an eye on the browser to check\n# ...\n# all looks good, stop the server with CTRL+C\n^C\n# and now the final step to optimize and push:\npublish()","category":"page"},{"location":"man/workflow/#Merge-conflicts-1","page":"Workflow","title":"Merge conflicts","text":"","category":"section"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"Since the pub/ and css/ and index.html folder are generated, it can sometimes cause git merge conflicts if, for instance, you have edited your website on computer A, optimised and published it and then subsequently pulled on computer B where – say – the content hasn't been minified yet. This could cause messy merge conflicts that would be annoying to fix. An easy way to reduce this risk is to simply remove the generated folders and files before pulling.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"The function cleanpull does precisely that and should be used if you intend to edit your website from multiple computers. It simply:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"removes all generate folders/files from your current director,\npulls.","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"So in such a case, your full workflow would be:","category":"page"},{"location":"man/workflow/#","page":"Workflow","title":"Workflow","text":"using JuDoc\ncd(\"path/user.github.io\")\ncleanpull()\nserve()\n# ...\npublish()","category":"page"},{"location":"man/syntax/#Syntax-1","page":"Syntax","title":"Syntax","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"This page is about the modified markdown syntax that is used in JuDoc. For the HTML templating syntax, see Templating.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A good way to become familiar with the JuDoc syntax is to generate a test-website and modify its index.md as explained in the Quickstart tutorial. Most of what is presented here is also shown in that example.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Contents:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Basic syntax\nMaths\nDiv blocks\nUsing raw HTML\nComments\nLaTeX commands\nNesting\nWhitespaces\nLocal vs global\nHyper-references\nInsertions\nFolder structure\nCode\nPlain-text output\nPlot output\nSlicing up  \nPage variables\nLocal page variables\nDefault variables\nGlobal page variables","category":"page"},{"location":"man/syntax/#Basics-1","page":"Syntax","title":"Basics","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The basic syntax corresponds to standard markdown and the markdown cheatsheet is a great resource, in particular:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"how to insert images,\nhow to insert code,\nhow to insert tables.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"One key difference with Git Flavored Markdown (GFM) is that inline HTML should not be used (see the section on injecting HTML below).","category":"page"},{"location":"man/syntax/#Maths-1","page":"Syntax","title":"Maths","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"For maths elements the usage is similar to standard LaTeX; whitespaces and new-lines don't matter. To see what you can and can't do in KaTeX, refer to their docs or this page.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In JuDoc you can have","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"inline math with $ ... $ (if you want to write a dollar symbol, you can escape it like so: \\$) e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"the function $ f(x)=\\sin(x) $ is periodic, this is a dollar sign: \\$.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"display math with $$ ... $$ or \\[ ... \\] e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"the identity\n\\[ \\exp(i\\pi)+1=0 \\]\nis nice","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"display + aligned math (1) with \\begin{align} ... \\end{align} e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\begin{align}\na&=5 \\\\\nb&=7 \\end{align}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"display + aligned math (2) with \\begin{eqnarray} ... \\end{eqnarray} e.g.:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\begin{eqnarray}\na &=& 5 \\\\\nb &=& 7 \\end{eqnarray}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn LaTeX use of eqnarray tends to be discouraged due to possible interference with array column spacing. In JuDoc this will not happen. However it is identical with LaTeX in that the spacing around the = in a eqnarray is larger than in an align which you may prefer.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nCurrently all display-math equations are numbered by default.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A final element to keep in mind is that you should surround inequality operators with whitespaces in order to avoid ambiguous commands in KaTeX. So in particular, both: $0< C$ or $0 < C$ are fine but 0 <C isn't.","category":"page"},{"location":"man/syntax/#Div-blocks-1","page":"Syntax","title":"Div blocks","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to locally style your content, you can use @@divname ... @@ which will wrap some content in a <div class=\"divname\"> ... </div> block which you can style as you wish in your CSS stylesheet. For instance, you may want to highlight some content with a light-yellow background, you can do this with:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some text then\n@@important\nSome important content\n@@\nand the rest of your text","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"and then, in your CSS, you could use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".important {\n  background-color: lemonchiffon;\n  padding-left: 0.5em;\n  padding-top: 0.7em;\n  padding-bottom: 0.5em;\n  border-radius: 5px;\n}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"which will look like","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"important: Important\nSome important content","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"These div blocks can be nested as in standard HTML.","category":"page"},{"location":"man/syntax/#Using-raw-HTML-1","page":"Syntax","title":"Using raw HTML","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can inject HTML by using ~~~ ... ~~~ which can be useful if, for instance, you occasionally want to use a specific layout such as text next to an image:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some text here in the \"standard\" layout then you can inject raw HTML:\n\n~~~\n<div class=\"row\">\n  <div class=\"container\">\n    <img class=\"left\" src=\"assets/infra/rndimg.jpg\">\n    <p> Marine iguanas are truly splendid creatures. </p>\n    <p> Evolution is cool. </p>\n    <div style=\"clear: both\"></div>      \n  </div>\n</div>\n~~~\n\nand subsequently continue with the standard layout.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn a raw HTML, you cannot use markdown, maths etc. For this reason, it is often preferable to use nested @@divname... blocks instead of raw HTML since those can have markdown, maths, etc. in them.","category":"page"},{"location":"man/syntax/#Comments-1","page":"Syntax","title":"Comments","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can add comments in your markdown using HTML-like comments: <!-- your comment --> possibly on multiple lines. Note that comments are not allowed in a math environment. So this:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some markdown here $\\sin(\\alpha+\\beta)=\\sin\\alpha\\cos\\beta+\\cos\\alpha\\sin\\beta$ then\n<!--\nTODO: add other formulas\n-->\nand then some more markdown","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"is fine but:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"$$\n\\exp(i\\pi)+1 = 0 <!-- this is very pretty -->\n$$","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"is not.","category":"page"},{"location":"man/syntax/#LaTeX-commands-1","page":"Syntax","title":"LaTeX commands","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"JuDoc allows the definition of LaTeX-like commands which can be particularly useful for repeating elements be it in or out of math environments.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Definition of commands is as in LaTeX (with the constraint that you must use the \\newcommand{...}[...]{...} format; see examples below).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Example 1: a command to get a mathbb R in math environments:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\R}{\\mathbb R}\n\nLet $f:\\R\\to\\R$ a function...","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Example 2: a command to get a langle x y rangle in math environments:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\scal}[1]{\\left\\langle #1 \\right\\rangle}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Example 3: a command to change the colour of the text outside of a math environment (note that inside a math environment you can use \\textcolor which is defined in KaTeX; I'm using a different name here so that these two don't clash since commands defined in JuDoc take precedence):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\col}[2]{~~~ <font color=\"#1\">#2</font> ~~~}\n\nAnd then you can use \\col{tomato}{colours} in your text and\n$$x + \\textcolor{blue}{y} + z$$\nin your maths.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nCommand names should currently only contain letters. This could be relaxed, for instance to allow underscore and numbers (since JuDoc strictly enforces the use of braces around command arguments, it wouldn't be ambiguous). If you think that would be useful, please open an issue.","category":"page"},{"location":"man/syntax/#Nesting-1","page":"Syntax","title":"Nesting","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Using commands can be nested, again as in LaTeX and, moreover, you can throw in some markdown. Here is a somewhat more sophisticated example for a \"definition\" environment:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\definition}[2]{@@definition **Definition**: (_!#1_) #2 @@}\n\n\\definition{angle between vectors}{\n  Let $x, y \\in \\R^n$ denote two real vectors and let $\\scal{\\cdot, \\cdot}$ denote\n  the inner product of two vectors. Then, the angle $\\theta$ between $x$ and $y$ is\n  given by $$ \\cos(\\theta) = {\\scal{x,y}\\over \\scal{x,x} \\scal{y,y}} $$ }","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"with CSS","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".definition {\n    background-color: aliceblue;\n    border-left: 5px solid cornflowerblue;\n    border-radius: 10px;\n    padding: 10px;\n}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"it will look like","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"(Image: )","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Of course, you can also nest definitions:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\norm}[2]{\\left\\|#1\\right\\|_{#2}}\n\\newcommand{\\anorm}[1]{\\norm{#1}{1}}\n\\newcommand{\\bnorm}[1]{\\norm{#1}{2}}\n\nLet $x\\in\\R^n$, there exists $0 < C_1 \\le C_2$ such that\n\n$$ C_1 \\anorm{x} \\le \\bnorm{x} \\le C_2\\anorm{x}. $$","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"where the final equation would look like C_1 x_1 le x_2 le C_2x_1.","category":"page"},{"location":"man/syntax/#Whitespaces-1","page":"Syntax","title":"Whitespaces","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In a JuDoc newcommand, to refer to an argument, you can use #1 or !#1. There is a subtle difference: the first one introduces a space left of the argument (this allows to avoid ambiguous commands in general) and the second one does not. In general whitespaces are irrelevant and will not show up and so the usual #1 is the recommended setting. However, there are cases where the whitespace does appear and you don't want it to (e.g. outside a math environment if the command is directly preceded by something). In those cases, and provided there is no ambiguity (e.g.: due to chaining commands), you can use !#1 which will not insert the whitespace. For instance:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\newcommand{\\pathwith}[1]{`/usr/local/bin/#1`}\n\\newcommand{\\pathwithout}[1]{`/usr/local/bin/!#1`}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\pathwith{hello} will give /usr/local/bin/ hello which would be inappropriate whereas\n\\pathwithout{hello} will give usr/local/hello.","category":"page"},{"location":"man/syntax/#Local-vs-global-1","page":"Syntax","title":"Local vs global","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The commands you define will be available only within the page you define them in. However, if you would like to define commands that are globally available to all pages, then you should simply put these definitions in src/config.md.","category":"page"},{"location":"man/syntax/#Hyper-references-1","page":"Syntax","title":"Hyper-references","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Currently two types of hyper-references are supported:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"for display math, and\nfor bibliography references.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The syntax for both is close to that of standard LaTeX (see below).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"To style the appearance of the links in CSS, use .jd-content.eqref a and .jd-content.bibref a classes; for instance:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".jd-content .eqref a  {color: blue;}\n.jd-content .bibref a {color: green;}","category":"page"},{"location":"man/syntax/#Equations-1","page":"Syntax","title":"Equations","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"To label an equation, just use \\label{some label} in the math environment and, to refer to it, use \\eqref{some label}:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Some equation:\n\n$$\\exp(i\\pi) + 1 = 0 \\label{a cool equation}$$\n\nand you can refer to it in the text like so, equation \\eqref{a cool equation}.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"As in LaTeX, you can refer to several equations in one by separating names with commas: \\eqref{some label, some other} (and so you should not use commas in your labels).","category":"page"},{"location":"man/syntax/#Bibliography-1","page":"Syntax","title":"Bibliography","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"For bibliography references, you can use \\biblabel{short}{name} to indicate a bibliography reference which will appear as a clickable link (name) or name and can be referred to by short:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In the text you may refer to \\citep{noether15, bezanson17} while in a bibliography section you would have\n\n* \\biblabel{noether15}{Noether (1915)} **Noether**, Korper und Systeme rationaler Funktionen, 1915.\n* \\biblabel{bezanson17}{Bezanson et al. (2017)} **Bezanson**, **Edelman**, **Karpinski** and **Shah**, [Julia: a fresh approach to numerical computing](https://julialang.org/publications/julia-fresh-approach-BEKS.pdf), SIAM review 2017.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The name argument therefore corresponds to how the bibliography reference will appear in the text. In the case above, the text will lead to","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"... refer to (Noether (1915), Bezanson et al. (2017)) while ...","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\cite{short1, short2} or \\citet{short3}: will not add parentheses around the link(s),\n\\citep{short4, short5}: will add parentheses around the link(s).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nIn the future, there may be a possibility to define specific bibliography styles. I've not yet come around to it but feel free to open an issue if you would like this or would like to suggest a way to do it.","category":"page"},{"location":"man/syntax/#Insertions-1","page":"Syntax","title":"Insertions","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Sometimes, when presenting code in a post, you would like to make sure the code works and it can be annoying to have to copy-paste it around then copy its output, especially if you decide to make modifications on the way in which case you have to repeat the process. For this reason, insertions can be convenient. The philosophy is:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"keep your code snippets in assets/scripts where they can be run and their output can be saved, this can be compared to a test/ folder in a Julia package,\nrun some or all of the snippets,\nuse \\input{...}{...} in your markdown (see below) and when the website is updated, it will plug-in the most recent parts that have been generated.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"That way, if you modify the code, everything will be updated on the website too while ensuring that the code actually runs and generates the output you're displaying.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nJuDoc is not meant to be a competitor to Weave.jl and consequently does not run your code. This ensures that application of page modifications is not massively slowed down by the execution of some code that appears in it (and would potentially be executed every time you modify the page). It is very much meant to be a two way process, one where you update/modify the code and one where you compile the website which plugs in the relevant, updated, parts that have been produced.","category":"page"},{"location":"man/syntax/#Folder-structure-1","page":"Syntax","title":"Folder structure","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The folder structure for assets/scripts should resemble","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":".\n└──scripts\n    ├── generate_results.jl\n    ├── output\n    │   ├── script1.txt\n    │   └── script2.png\n    ├── script1.jl\n    └── script2.jl","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Your scripts would be script1.jl and script2.jl these can contain # hide at the end of lines you do not want to show (hide is not case sensitive so # HiDe would be fine too).","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The generate_results.jl file should run the scripts and redirect outputs to the assets/scripts/output directory. We suggest you use something like this (if you generate an example website with newsite, it's all in there) though you can of course modify it as you wish.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"dir = @__DIR__\n\n\"\"\"\n    genplain(s)\n\nSmall helper function to run some code and redirect the output (stdout) to a file.\n\"\"\"\nfunction genplain(s::String)\n    open(joinpath(dir, \"output\", \"$(splitext(s)[1]).txt\"), \"w\") do outf\n        redirect_stdout(outf) do\n            include(joinpath(dir, s))\n        end\n    end\nend\n\n# run `script1.jl` and redirect what it prints to `output/script1.txt`\ngenplain(\"script1.jl\")\n\n# run `script2.jl` which has a savefig(joinpath(@__DIR__, \"output\", \"script2.png\"))\ninclude(\"script2.jl\")","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The function genplain(\"scriptname.jl\") just redirects the output of the script to output/scriptname.txt. So for instance if you have in assets/scripts/script1.jl","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"print(\"hello\")","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Then genplain(\"script1.jl\") will generate assets/scripts/output/script1.txt with content","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"hello","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nYou could have scripts in any language here (R, Python, ...) as long as the folder structure is the same.","category":"page"},{"location":"man/syntax/#Code-1","page":"Syntax","title":"Code","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to insert the code of a script and have it highlighted you can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\input{julia}{script1.jl}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or \\input{code:julia}{script1.jl}. This will insert the content of the file assets/scripts/script1.jl into a block that will be highlighted as julia code.","category":"page"},{"location":"man/syntax/#Plain-text-output-1","page":"Syntax","title":"Plain-text output","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to insert the plain-text output of a script, you can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\input{output}{script1.jl}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or \\input{output:plain}{script1.jl}. This will insert the content of the file assets/scripts/script1.txt into a non-highlighted code-block.","category":"page"},{"location":"man/syntax/#Plot-output-1","page":"Syntax","title":"Plot output","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"In order to insert a plot generated by a script, you can use","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"\\input{plot}{script1.jl}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"or \\input{plot:id}{script1.jl}. This will look for an image file with root name assets/scripts/script1.ext where ext is gif, png, jp(e)g, svg. If you use plot:id then it will look for an image file with root name assets/scripts/script1id.ext.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The plot:id option is useful if you have a script that generates several plots for instance.","category":"page"},{"location":"man/syntax/#Slicing-up-1","page":"Syntax","title":"Slicing up","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The structure in the generate_results.jl effectively means that all your code is run as one big script. This also means that if you want to slice some of your code in several parts and show intermediate outputs (e.g. plots), well you can just do that by having a script_1_p1.jl, script_1_p2.jl etc. and then just use  \\input multiple times.","category":"page"},{"location":"man/syntax/#Page-variables-1","page":"Syntax","title":"Page variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Page variables are a way to interact with the HTML templating. In essence, you can define variables in the markdown which can then be called or used in the HTML building blocks that are in src/_html_parts/.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"note: Note\nPage variables are still somewhat rudimentary and while the syntax for declaring a variable will likely not change, the way they are used will almost certainly be refined in the future (see also Templating).","category":"page"},{"location":"man/syntax/#Local-page-variables-1","page":"Syntax","title":"Local page variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"The syntax to define a page variable in markdown is to write on a new line:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"@def variable_name = ...","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"where whatever is after the = sign should be a valid Julia expression (Julia will try to parse it and will throw an error if it can't). Multiline definitions are not (yet) allowed but if you have a need for that, please open an issue. The idea is that these variables are likely to be rather simple: strings, bools, ints, dates, ... I don't yet see a usecase for more involved things.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Once such a variable is defined you can use it with the templating syntax (see Templating). For instance in your src/index.md you could have","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"@def contributors = \"Chuck Norris\"","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"and in your src/_html_parts/head.html you could have","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"{{isdef contributors}}\nThis page was written with the help of {{fill contributors}}\n{{end}}","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"since contributors is a local page variable that is defined in src/index.md, the corresponding index.html will show \"This page was written with the help of Chuck Norris\"; however on any other page, this will not show (unless, again, you define @def contributors = ... there). See also Templating for how page variables can be used in the HTML.","category":"page"},{"location":"man/syntax/#Default-variables-1","page":"Syntax","title":"Default variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"A few variables are already present and used in the basic templates (you can still modify their value though it has to match the type):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Name Accepted types Default value Function\ntitle Nothing, String nothing title of the page (tab name)\nhasmath Bool true if true the KaTeX stylesheet and script will be added to the page\nhascode Bool false if false the highlight stylesheet and script will be added to the page\ndate String, Date, Nothing Date(1) a date variable","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Then there are some variables that are automatically assigned and that you should therefore not assign  yourself (but you can use them):","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Name Type Value Function\njd_ctime Date stat(file).ctime page creation date\njd_mtime Date stat(file).mtime last page modification date","category":"page"},{"location":"man/syntax/#Global-page-variables-1","page":"Syntax","title":"Global page variables","text":"","category":"section"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can also define global page variables by simply putting the definition in the src/config.md file. For instance you may want to have a single main author across all pages and would then write","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"@def author = \"Septimia Zenobia\"","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"in the src/config.md file.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"You can overwrite global variables in any page by redefining it locally. For instance you could set hasmath globally to false and hascode globally to true and then modify it locally as appropriate.","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"There are also a few pre-defined global variables:","category":"page"},{"location":"man/syntax/#","page":"Syntax","title":"Syntax","text":"Name Accepted types Default value Function\nauthor String, Nothing THE AUTHOR author (e.g. may appear in footer)\ndate_format String U dd, yyyy a valid date format specifier","category":"page"},{"location":"man/templating/#Templating-1","page":"Templating","title":"Templating","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"This page is about the templating syntax that is used in JuDoc which allows you to have some control over the generated HTML. It can be useful as a way to, depending on the page,","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"adjust the layout,\nspecify elements that should be inserted in the page such as date of last modification, page author(s), etc.,\nspecify auxiliary elements that should be loaded with the page such as stylesheets or javascript libraries,\n...","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nThe templating system is still rudimentary at this point and is likely to be significantly improved over time (your help and suggestions are welcome!).","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Contents:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Basic syntax\nConditional blocks\nBase conditional blocks\nisdef conditional blocks\nispage conditional blocks\nFunction blocks","category":"page"},{"location":"man/templating/#Basic-syntax-1","page":"Templating","title":"Basic syntax","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"When developing your website, you can define global or local page variables using","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"@def varname = ...","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"either in the src/config.md file  (in which case the variable is global) or in a specific page (in which case the variable is local or overwrites a global one). See also the page on the markdown Syntax.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"These variables can subsequently be called in \"HTML Blocks\" in a way that is inspired from Hugo's templating system via {{...}}. These blocks would be placed in the  HTML layout building blocks files that are in src/_html_parts/.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"A simple example is the insertion of a string defining the title of the page (which would appear the tab name). In the markdown of src/path/page1.md you would have:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"@def title = \"Title for page 1\"","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"and in src/_html_parts/head.html you would have","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"<title>{{fill title}}</title>","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"This HTML block has the form {{function_name a b ...}} where a, b, ... are page variable names. Here the fill function simply tries to find a page variable \"title\" and places its content here so that in the final generated HTML, there would be:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"<title>Title for page 1</title>","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"See Function blocks for more such functions that can be used.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nWhitespaces in HTML blocks are irrelevant as long as the different parts are separated by at least one so for instance {{fill title }} or {{ fill   title}} would both be fine.","category":"page"},{"location":"man/templating/#Conditional-blocks-1","page":"Templating","title":"Conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"It will often be handy to do things in your layout conditional on specific variables. Three types of conditional blocks are allowed:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"a \"classical\" conditional block with if, elseif, else that accepts page variables that have boolean value,\na conditional block that does something provided a variable exists (or not),\na conditional block that does something depending on whether the page is a specific one (or not a specific one).","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nNesting of conditional blocks is currently not allowed  but shouldn't be hard to implement and will likely be supported in the near future.","category":"page"},{"location":"man/templating/#Base-conditional-blocks-1","page":"Templating","title":"Base conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Such blocks have the structure","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{if vname1}}\n...\n{{elseif vname2}}\n...\n{{else}}\n...\n{{end}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"where the {{elseif ... }} and {{else}} blocks are optional. They work as you would expect: look up the variables vname1 in the currently available page variables, if it doesn't exist an error will be shown and the whole conditional block will be ignored, otherwise the value is retrieved and depending on whether it is true or false the relevant blocks will be executed.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"As a simple example consider a variable draft which you could use to control the addition of a banner at the top of a page indicating it's still work in progress:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"in src/pages/pg1.md you would have","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"@def draft = true","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"while in src/_html_parts/head.html you could have","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{if draft}}\n<div class=\"draft-banner\" style=\"background-color:red;\ncolor:white;padding:10px;font-weight:bold;\">\n    This is currently work in progress!\n</div>\n{{end}}","category":"page"},{"location":"man/templating/#isdef-conditional-blocks-1","page":"Templating","title":"isdef conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"The {{isdef vname}} or {{isnotdef vname}} are blocks that do something depending on whether a specific variable exists (or not):","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{isdef author}}\n...\n{{end}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Such blocks can be useful where you sometimes want something to be defined and sometimes not.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"For instance, you may want to add a title if the variable title exists: in the markdown you would then either have @def title = ... or not and in the head.html:","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{isdef title}}\n<title>{{fill title}}</title>\n{{end}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nCurrently these blocks do not accept {{else}} statements but this should be supported in the near future.","category":"page"},{"location":"man/templating/#ispage-conditional-blocks-1","page":"Templating","title":"ispage conditional blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"The {{ispage path/to/page}} or {{isnotpage path/to/page}} are blocks that do something depending on whether the page is a specific one (or not). For instance in the pure-sm template, in the head.html you will see elements for the side menu with","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"<li class=\"pure-menu-item {{ispage /index.html}}pure-menu-selected{{end}}\">\n    <a href=\"/\" class=\"pure-menu-link\">Home</a>\n</li>","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"which add a class to a <li> object depending on the page that indicate which list item should be styled as a \"selected\" button depending on the page we're on.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nAs the def blocks above, these blocks do not yet accept {{else}} statements.","category":"page"},{"location":"man/templating/#Function-blocks-1","page":"Templating","title":"Function blocks","text":"","category":"section"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"These are blocks of the form","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"{{f_name p1 p2}}","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"where f_name is a function name (see below) and p1, p2 would be variable names that correspond to arguments of the function.","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"Name #params Example Role\nfill 1 {{fill author}} replaces the block with the value of the page variable\ninsert 1 {{insert path/to/file}} replaces the block with the content of the file at path/to/file","category":"page"},{"location":"man/templating/#","page":"Templating","title":"Templating","text":"note: Note\nIf you would like to have more of those, please open an issue and explain the use-case, I'll be happy to expand the list.","category":"page"},{"location":"man/contrib/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"Contributions, questions and comments are very welcome. In particular, I can see two main ways you can contribute:","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"use JuDoc, ask questions, report bugs or ask for features by opening issue(s),\nsuggest improvements to the code, html generation, or themes.","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"The first one is self-explanatory, please just check that your issue is somewhat aligned with the Judoc spirit.","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"For the second one, all suggestions will be welcome though I will prioritise help in the following three areas which I believe would make the user experience better:","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"bug fixes,\nerror handling: at the moment the error handling is basic to say the least, anything to would help errors being better/more sensibly handled would be great,\nimproving the templates: the current templates are meant to be simple and easily adjustable but there could be more of them and they may be improved to have better cross-browser support, responsiveness etc. For template improvement, please refer to JuDocTemplates.jl.","category":"page"},{"location":"man/contrib/#JuDoc-spirit-1","page":"Contributing","title":"JuDoc spirit","text":"","category":"section"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"Some of the key objectives of JuDoc are to have a package that...","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"can be used easily by people who have little experience with web-dev,\nis in Julia, is fast™ for local editing, and can be easily extended,\ngenerates pages that are light and load very quickly.","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"In particular, for the last point, I would favour theme contributions that minimise the use of complex javascript libraries or intricate CSS stylesheets if possible. Beyond trying to avoid the bloated web, I will be more supportive of extensions that avoid intruding on people's privacy. Although it is trivial to plug in elements like Google Analytics, Discourse comments or social media buttons in the templates, it is not done by default for a reason; I'd prefer writing docs that explains how to add those than to add them by default 😅 .","category":"page"},{"location":"man/contrib/#","page":"Contributing","title":"Contributing","text":"If you know of good alternatives, open issues! For instance the GitHub-issues based comment system utterances looks great (but I haven't tried it yet).","category":"page"},{"location":"lib/design/#Design-1","page":"Design","title":"Design","text":"","category":"section"},{"location":"lib/design/#","page":"Design","title":"Design","text":"TBA","category":"page"},{"location":"lib/public/#Public-Interface-1","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for JuDoc.jl's exported functions","category":"page"},{"location":"lib/public/#","page":"Public","title":"Public","text":"JuDoc.newsite\nJuDoc.serve\nJuDoc.optimize\nJuDoc.publish\nJuDoc.cleanpull","category":"page"},{"location":"lib/public/#JuDocTemplates.newsite","page":"Public","title":"JuDocTemplates.newsite","text":"newsite(topdir; template=\"basic\", cd=true)\n\nGenerate a new folder (an error is thrown if it already exists) that contains the skeleton of a website that can be processed by JuDoc. The user can specify a template out of the list of available templates.\n\ntemplate=\"basic\" specify the name of the desired template,\ncd=true specify whether to change the current directory to the newly created folder or not.\nverbose=true specify whether to display information or not.\n\nExample\n\nnewsite(\"MyNewWebsite\", template=\"pure-sm\")\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.serve","page":"Public","title":"JuDoc.serve","text":"serve(; clear, verb, port, single, prerender)\n\n\nRuns JuDoc in the current directory.\n\nKeyword arguments:\n\nclear=false:     whether to remove any existing output directory\nverb=false:      whether to display messages\nport=8000:       the port to use for the local server (should pick a number between 8000 and 9000)\nsingle=false:    whether to run a single pass or run continuously\nprerender=false: whether to pre-render javascript (KaTeX and highlight.js)\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.optimize","page":"Public","title":"JuDoc.optimize","text":"optimize(; prerender, minify, sig)\n\n\nDoes a full pass followed by a pre-rendering and minification step.\n\nprerender=true: whether to pre-render katex and highlight.js (requires node.js)\nminify=true:    whether to minify output (requires python3 and css_html_js_minify)\nsig=false:      whether to return an integer indicating success (see publish)\n\nNote: if the prerendering is set to true, the minification will take longer as the HTML files will be larger (especially if you have lots of maths on pages).\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.publish","page":"Public","title":"JuDoc.publish","text":"publish(; prerender, minify, nopass)\n\n\nThis is a simple wrapper doing a git commit and git push without much fanciness. It assumes the current directory is a git folder. This will work in most simple scenarios (e.g. there's only one person updating the website). In other scenarios you should probably do this manually.\n\nKeyword arguments\n\nprerender=true: prerender javascript before pushing see optimize\nminify=true:    minify output before pushing see optimize\nnopass=false:   set this to true if you have already run optimize manually.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#JuDoc.cleanpull","page":"Public","title":"JuDoc.cleanpull","text":"cleanpull()\n\n\nCleanpull allows you to pull from your remote git repository after having removed the local output directory. This will help avoid merge clashes.\n\n\n\n\n\n","category":"function"}]
}
